<tokens>
<preprocessorDirective> #include </preprocessorDirective>
<symbol> &lt; </symbol>
<identifier> stdlib </identifier>
<symbol> . </symbol>
<identifier> h </identifier>
<symbol> &gt; </symbol>
<preprocessorDirective> #include </preprocessorDirective>
<symbol> &lt; </symbol>
<identifier> stdio </identifier>
<symbol> . </symbol>
<identifier> h </identifier>
<symbol> &gt; </symbol>
<preprocessorDirective> #include </preprocessorDirective>
<symbol> &lt; </symbol>
<identifier> stdbool </identifier>
<symbol> . </symbol>
<identifier> h </identifier>
<symbol> &gt; </symbol>
<preprocessorDirective> #include </preprocessorDirective>
<stringConstant> list.h </stringConstant>
<preprocessorDirective> #include </preprocessorDirective>
<stringConstant> gc.h </stringConstant>
<identifier> list </identifier>
<symbol> * </symbol>
<identifier> newitem </identifier>
<symbol> ( </symbol>
<keyword> void </keyword>
<symbol> * </symbol>
<identifier> v </identifier>
<symbol> ) </symbol>
<symbol> { </symbol>
<identifier> list </identifier>
<symbol> * </symbol>
<identifier> o </identifier>
<symbol> = </symbol>
<identifier> malloc </identifier>
<symbol> ( </symbol>
<keyword> sizeof </keyword>
<symbol> ( </symbol>
<identifier> list </identifier>
<symbol> ) </symbol>
<symbol> ) </symbol>
<symbol> ; </symbol>
<keyword> if </keyword>
<symbol> ( </symbol>
<identifier> o </identifier>
<symbol> == </symbol>
<identifier> NULL </identifier>
<symbol> ) </symbol>
<symbol> { </symbol>
<identifier> exit </identifier>
<symbol> ( </symbol>
<integerConstant> 1 </integerConstant>
<symbol> ) </symbol>
<symbol> ; </symbol>
<symbol> } </symbol>
<identifier> o </identifier>
<symbol> -> </symbol>
<identifier> val </identifier>
<symbol> = </symbol>
<identifier> v </identifier>
<symbol> ; </symbol>
<identifier> o </identifier>
<symbol> -> </symbol>
<identifier> next </identifier>
<symbol> = </symbol>
<identifier> NULL </identifier>
<symbol> ; </symbol>
<identifier> gc_register </identifier>
<symbol> ( </symbol>
<symbol> ( </symbol>
<keyword> void </keyword>
<symbol> * </symbol>
<symbol> ) </symbol>
<identifier> o </identifier>
<symbol> , </symbol>
<identifier> LIST </identifier>
<symbol> ) </symbol>
<symbol> ; </symbol>
<keyword> return </keyword>
<identifier> o </identifier>
<symbol> ; </symbol>
<symbol> } </symbol>
<identifier> list </identifier>
<symbol> * </symbol>
<identifier> copyitem </identifier>
<symbol> ( </symbol>
<identifier> list </identifier>
<symbol> * </symbol>
<identifier> i </identifier>
<symbol> ) </symbol>
<symbol> { </symbol>
<identifier> list </identifier>
<symbol> * </symbol>
<identifier> o </identifier>
<symbol> = </symbol>
<identifier> malloc </identifier>
<symbol> ( </symbol>
<keyword> sizeof </keyword>
<symbol> ( </symbol>
<identifier> list </identifier>
<symbol> ) </symbol>
<symbol> ) </symbol>
<symbol> ; </symbol>
<keyword> if </keyword>
<symbol> ( </symbol>
<identifier> o </identifier>
<symbol> == </symbol>
<identifier> NULL </identifier>
<symbol> ) </symbol>
<symbol> { </symbol>
<identifier> exit </identifier>
<symbol> ( </symbol>
<integerConstant> 1 </integerConstant>
<symbol> ) </symbol>
<symbol> ; </symbol>
<symbol> } </symbol>
<identifier> o </identifier>
<symbol> -> </symbol>
<identifier> val </identifier>
<symbol> = </symbol>
<identifier> i </identifier>
<symbol> -> </symbol>
<identifier> val </identifier>
<symbol> ; </symbol>
<identifier> o </identifier>
<symbol> -> </symbol>
<identifier> next </identifier>
<symbol> = </symbol>
<identifier> NULL </identifier>
<symbol> ; </symbol>
<keyword> return </keyword>
<identifier> o </identifier>
<symbol> ; </symbol>
<symbol> } </symbol>
<identifier> list </identifier>
<symbol> * </symbol>
<identifier> append </identifier>
<symbol> ( </symbol>
<identifier> list </identifier>
<symbol> * </symbol>
<identifier> l </identifier>
<symbol> , </symbol>
<keyword> void </keyword>
<symbol> * </symbol>
<identifier> v </identifier>
<symbol> ) </symbol>
<symbol> { </symbol>
<identifier> list </identifier>
<symbol> * </symbol>
<identifier> ni </identifier>
<symbol> = </symbol>
<identifier> newitem </identifier>
<symbol> ( </symbol>
<identifier> v </identifier>
<symbol> ) </symbol>
<symbol> ; </symbol>
<keyword> if </keyword>
<symbol> ( </symbol>
<identifier> l </identifier>
<symbol> == </symbol>
<identifier> NULL </identifier>
<symbol> ) </symbol>
<symbol> { </symbol>
<keyword> return </keyword>
<identifier> ni </identifier>
<symbol> ; </symbol>
<symbol> } </symbol>
<identifier> list </identifier>
<symbol> * </symbol>
<identifier> curr </identifier>
<symbol> ; </symbol>
<keyword> for </keyword>
<symbol> ( </symbol>
<identifier> curr </identifier>
<symbol> = </symbol>
<identifier> l </identifier>
<symbol> ; </symbol>
<identifier> curr </identifier>
<symbol> -> </symbol>
<identifier> next </identifier>
<symbol> != </symbol>
<identifier> NULL </identifier>
<symbol> ; </symbol>
<identifier> curr </identifier>
<symbol> = </symbol>
<identifier> curr </identifier>
<symbol> -> </symbol>
<identifier> next </identifier>
<symbol> ) </symbol>
<symbol> ; </symbol>
<identifier> curr </identifier>
<symbol> -> </symbol>
<identifier> next </identifier>
<symbol> = </symbol>
<identifier> ni </identifier>
<symbol> ; </symbol>
<keyword> return </keyword>
<identifier> l </identifier>
<symbol> ; </symbol>
<symbol> } </symbol>
<identifier> list </identifier>
<symbol> * </symbol>
<identifier> concat </identifier>
<symbol> ( </symbol>
<identifier> list </identifier>
<symbol> * </symbol>
<identifier> h </identifier>
<symbol> , </symbol>
<identifier> list </identifier>
<symbol> * </symbol>
<identifier> t </identifier>
<symbol> ) </symbol>
<symbol> { </symbol>
<identifier> list </identifier>
<symbol> * </symbol>
<identifier> curr </identifier>
<symbol> ; </symbol>
<keyword> for </keyword>
<symbol> ( </symbol>
<identifier> curr </identifier>
<symbol> = </symbol>
<identifier> h </identifier>
<symbol> ; </symbol>
<identifier> curr </identifier>
<symbol> -> </symbol>
<identifier> next </identifier>
<symbol> != </symbol>
<identifier> NULL </identifier>
<symbol> ; </symbol>
<identifier> curr </identifier>
<symbol> = </symbol>
<identifier> curr </identifier>
<symbol> -> </symbol>
<identifier> next </identifier>
<symbol> ) </symbol>
<symbol> ; </symbol>
<identifier> curr </identifier>
<symbol> -> </symbol>
<identifier> next </identifier>
<symbol> = </symbol>
<identifier> t </identifier>
<symbol> ; </symbol>
<keyword> return </keyword>
<identifier> h </identifier>
<symbol> ; </symbol>
<symbol> } </symbol>
<identifier> list </identifier>
<symbol> * </symbol>
<identifier> copy </identifier>
<symbol> ( </symbol>
<identifier> list </identifier>
<symbol> * </symbol>
<identifier> l </identifier>
<symbol> ) </symbol>
<symbol> { </symbol>
<identifier> list </identifier>
<symbol> * </symbol>
<identifier> o </identifier>
<symbol> = </symbol>
<identifier> NULL </identifier>
<symbol> ; </symbol>
<identifier> list </identifier>
<symbol> * </symbol>
<identifier> curr </identifier>
<symbol> ; </symbol>
<keyword> for </keyword>
<symbol> ( </symbol>
<identifier> curr </identifier>
<symbol> = </symbol>
<identifier> l </identifier>
<symbol> ; </symbol>
<identifier> curr </identifier>
<symbol> != </symbol>
<identifier> NULL </identifier>
<symbol> ; </symbol>
<identifier> curr </identifier>
<symbol> = </symbol>
<identifier> curr </identifier>
<symbol> -> </symbol>
<identifier> next </identifier>
<symbol> ) </symbol>
<symbol> { </symbol>
<identifier> o </identifier>
<symbol> = </symbol>
<identifier> append </identifier>
<symbol> ( </symbol>
<identifier> o </identifier>
<symbol> , </symbol>
<identifier> curr </identifier>
<symbol> -> </symbol>
<identifier> val </identifier>
<symbol> ) </symbol>
<symbol> ; </symbol>
<symbol> } </symbol>
<keyword> return </keyword>
<identifier> o </identifier>
<symbol> ; </symbol>
<symbol> } </symbol>
<keyword> void </keyword>
<identifier> list_free </identifier>
<symbol> ( </symbol>
<keyword> void </keyword>
<symbol> * </symbol>
<identifier> _l </identifier>
<symbol> ) </symbol>
<symbol> { </symbol>
<identifier> list </identifier>
<symbol> * </symbol>
<identifier> l </identifier>
<symbol> = </symbol>
<identifier> _l </identifier>
<symbol> ; </symbol>
<identifier> free </identifier>
<symbol> ( </symbol>
<identifier> l </identifier>
<symbol> ) </symbol>
<symbol> ; </symbol>
<symbol> } </symbol>
<keyword> void </keyword>
<symbol> * </symbol>
<identifier> last </identifier>
<symbol> ( </symbol>
<identifier> list </identifier>
<symbol> * </symbol>
<identifier> l </identifier>
<symbol> ) </symbol>
<symbol> { </symbol>
<identifier> list </identifier>
<symbol> * </symbol>
<identifier> cursor </identifier>
<symbol> ; </symbol>
<keyword> for </keyword>
<symbol> ( </symbol>
<identifier> cursor </identifier>
<symbol> = </symbol>
<identifier> l </identifier>
<symbol> ; </symbol>
<identifier> cursor </identifier>
<symbol> -> </symbol>
<identifier> next </identifier>
<symbol> != </symbol>
<identifier> NULL </identifier>
<symbol> ; </symbol>
<identifier> cursor </identifier>
<symbol> = </symbol>
<identifier> cursor </identifier>
<symbol> -> </symbol>
<identifier> next </identifier>
<symbol> ) </symbol>
<symbol> ; </symbol>
<keyword> return </keyword>
<identifier> cursor </identifier>
<symbol> -> </symbol>
<identifier> val </identifier>
<symbol> ; </symbol>
<symbol> } </symbol>
<identifier> list </identifier>
<symbol> * </symbol>
<identifier> init </identifier>
<symbol> ( </symbol>
<identifier> list </identifier>
<symbol> * </symbol>
<identifier> l </identifier>
<symbol> ) </symbol>
<symbol> { </symbol>
<identifier> list </identifier>
<symbol> * </symbol>
<identifier> cursor </identifier>
<symbol> ; </symbol>
<keyword> for </keyword>
<symbol> ( </symbol>
<identifier> cursor </identifier>
<symbol> = </symbol>
<identifier> l </identifier>
<symbol> ; </symbol>
<identifier> cursor </identifier>
<symbol> -> </symbol>
<identifier> next </identifier>
<symbol> -> </symbol>
<identifier> next </identifier>
<symbol> != </symbol>
<identifier> NULL </identifier>
<symbol> ; </symbol>
<identifier> cursor </identifier>
<symbol> = </symbol>
<identifier> cursor </identifier>
<symbol> -> </symbol>
<identifier> next </identifier>
<symbol> ) </symbol>
<symbol> ; </symbol>
<identifier> free </identifier>
<symbol> ( </symbol>
<identifier> cursor </identifier>
<symbol> -> </symbol>
<identifier> next </identifier>
<symbol> ) </symbol>
<symbol> ; </symbol>
<identifier> cursor </identifier>
<symbol> -> </symbol>
<identifier> next </identifier>
<symbol> = </symbol>
<identifier> NULL </identifier>
<symbol> ; </symbol>
<keyword> return </keyword>
<identifier> l </identifier>
<symbol> ; </symbol>
<symbol> } </symbol>
</tokens>

