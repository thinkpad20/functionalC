<tokens>
<preprocessorDirective> #ifndef </preprocessorDirective>
<identifier> LIST_H </identifier>
<preprocessorDirective> #define </preprocessorDirective>
<identifier> LIST_H </identifier>
<preprocessorDirective> #include </preprocessorDirective>
<symbol> &lt; </symbol>
<identifier> stdbool </identifier>
<symbol> . </symbol>
<identifier> h </identifier>
<symbol> &gt; </symbol>
<keyword> typedef </keyword>
<keyword> struct </keyword>
<identifier> list_ </identifier>
<symbol> { </symbol>
<keyword> void </keyword>
<symbol> * </symbol>
<identifier> val </identifier>
<symbol> ; </symbol>
<keyword> struct </keyword>
<identifier> list_ </identifier>
<symbol> * </symbol>
<identifier> next </identifier>
<symbol> ; </symbol>
<symbol> } </symbol>
<identifier> list </identifier>
<symbol> ; </symbol>
<identifier> list </identifier>
<symbol> * </symbol>
<identifier> newitem </identifier>
<symbol> ( </symbol>
<keyword> void </keyword>
<symbol> * </symbol>
<identifier> v </identifier>
<symbol> ) </symbol>
<symbol> ; </symbol>
<identifier> list </identifier>
<symbol> * </symbol>
<identifier> copyitem </identifier>
<symbol> ( </symbol>
<identifier> list </identifier>
<symbol> * </symbol>
<identifier> i </identifier>
<symbol> ) </symbol>
<symbol> ; </symbol>
<identifier> list </identifier>
<symbol> * </symbol>
<identifier> append </identifier>
<symbol> ( </symbol>
<identifier> list </identifier>
<symbol> * </symbol>
<identifier> l </identifier>
<symbol> , </symbol>
<keyword> void </keyword>
<symbol> * </symbol>
<identifier> v </identifier>
<symbol> ) </symbol>
<symbol> ; </symbol>
<identifier> list </identifier>
<symbol> * </symbol>
<identifier> concat </identifier>
<symbol> ( </symbol>
<identifier> list </identifier>
<symbol> * </symbol>
<identifier> h </identifier>
<symbol> , </symbol>
<identifier> list </identifier>
<symbol> * </symbol>
<identifier> t </identifier>
<symbol> ) </symbol>
<symbol> ; </symbol>
<identifier> list </identifier>
<symbol> * </symbol>
<identifier> copy </identifier>
<symbol> ( </symbol>
<identifier> list </identifier>
<symbol> * </symbol>
<identifier> h </identifier>
<symbol> ) </symbol>
<symbol> ; </symbol>
<keyword> void </keyword>
<identifier> list_free </identifier>
<symbol> ( </symbol>
<keyword> void </keyword>
<symbol> * </symbol>
<symbol> ) </symbol>
<symbol> ; </symbol>
<preprocessorDirective> #define </preprocessorDirective>
<identifier> head </identifier>
<symbol> ( </symbol>
<identifier> list </identifier>
<symbol> ) </symbol>
<symbol> ( </symbol>
<symbol> ( </symbol>
<identifier> list </identifier>
<symbol> ) </symbol>
<symbol> -> </symbol>
<identifier> val </identifier>
<symbol> ) </symbol>
<preprocessorDirective> #define </preprocessorDirective>
<identifier> tail </identifier>
<symbol> ( </symbol>
<identifier> list </identifier>
<symbol> ) </symbol>
<symbol> ( </symbol>
<symbol> ( </symbol>
<identifier> list </identifier>
<symbol> ) </symbol>
<symbol> -> </symbol>
<identifier> next </identifier>
<symbol> ) </symbol>
<keyword> void </keyword>
<symbol> * </symbol>
<identifier> last </identifier>
<symbol> ( </symbol>
<identifier> list </identifier>
<symbol> * </symbol>
<identifier> l </identifier>
<symbol> ) </symbol>
<symbol> ; </symbol>
<identifier> list </identifier>
<symbol> * </symbol>
<identifier> init </identifier>
<symbol> ( </symbol>
<identifier> list </identifier>
<symbol> * </symbol>
<identifier> l </identifier>
<symbol> ) </symbol>
<symbol> ; </symbol>
<preprocessorDirective> #endif </preprocessorDirective>
</tokens>

