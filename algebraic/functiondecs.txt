Another useful feature to be found in a language like Haskell is case-based function declarations. Take the following definition of the sum of a list in Haskell:

sumList :: [Int] -> Int
sumList [] = 0
sumList (x:xs) = x + sumList xs

We could mirror this in C:

struct list {
	int val;
	struct list *next;
};

int sumList(struct list *l) {
	if (l.next == NULL)
		return 0;
	return l->val + sumList(l->next); 
}

Now in this case, the C version isn't significantly longer than the Haskell, nor is it more difficult to understand. However, there are many cases where this is not the case, and having the ability to simply define base case/nth case, or even multiple disparate cases, comes in handy. Let's formulate a (prototypical) syntax for this in functional C:

int sumList(list *l) {
	sumList (l : l->next == NULL) { 
		return 0 
	}
	sumList (l) { 
		return l->val + sumList(l->next) 
	}
}

As in Haskell, this function will be evaluated in a fall-through manner. The first definition for which the predicate is true will be evaluated.

In functional programming, the singly-linked list will be such a fundamental data structure that it's probably best to make it a primitive, wrapped around something like:

struct list {
	void *data;
	struct list *next;
}

Note that this may not actually be the internal representation of a list, especially if we create list using the algebraic type system. Either way, let's assume that this can be denoted with a new primitive data type list (as with data, we may want to add an at sign to facilitate functional C being a strict superset of C). Let's also assume that we have some notation and operators that are essential for lists:

list!int *l           // l a pointer to a struct list with void * effectively set to int *. Note we're using the ! syntax from D.
boolean isEmpty = !l  // isEmpty is true (the ! operator on a list l is the same thing as "l->next == NULL")
l = [1, 3, 5, 7]      // the compiler can read that l is a list of ints and construct it accordingly
int a = .l            // a == 1
list!int *l2 = l..    // l2 == {3, 5, 7}

Keep in mind that all of these operators are tentative, but we definitely want to have an easy way to denote the head and tail of a list. We'll get to the pattern matching stuff later (I hope). OK, now that we have some operators, let's see if we can simplify our sumList function:

int sumList(list!int *l) {
	sumList(l | !l) {
		return 0
	}
	sumList(l) {
		return .l + sumList(l..)
	}
}

What if we simplified it a bit further? Note that I'm still just kinda spitballing...

int sumList(list!int *l) {
	match (!l) => { return 0 }
	match (l) => { return .l + sumList(l..) }
}

Now let's employ several more steps of evolution. We'll allow curly braces to be omitted as long as the function body is only one line. We'll borrow the keyword "auto" and use it in the D/C++ way, to indicate that the return value is inferred. Similarly, we won't explicitly define what kind of list l is. We'll drop the * from the list variable -- as a primitive data type, it's pointer-ness should be implied anyway (there could perhaps be special mechanisms to create non-heap list nodes). And we'll declare that the final statement of any function is assumed to be a return (allowing a return to be explicitly declared if desired). This would give us:

auto sumList(list l) {
	match (!l) => 0
	match (l) => .l + sumList(l..)
}

Now we're really looking quite different! Let's restate our list examples with the clean syntax:

list l                // note that list is intrinsically parametric, so not declaring a type simply means it will be inferred later.
boolean isEmpty = !l  // isEmpty is true
l = [1, 3, 5, 7]      // At this point, the type of l has been recorded and cannot be changed.
int a = .l            // a == 1
auto l2 = l..         // l2 == {3, 5, 7}. "list l2 = l.." would also be valid.

Let's imagine how this would look given an algebraic-type definition of a list. In Haskell, a list is defined as:

data [] a = [] | a : [a]

Or equivalently:

data List a = Empty | Cons a (List a)

Using our algebraic definitions from before, let's try to make one of these in functional C:

data list!auto {
	empty()
	cons(auto head, list!auto tail)
}

By adopting a C++ style auto keyword, we are also allowing parameterized types. Any framework which can reliably infer the type of a variable, can also do all of the appropriate conversions and casts in the code.

Just so we don't lose track of what we're going for, let's see how this would look in ANSI C code:

typedef
struct list_ {
	enum {empty_t, cons_t} t; 
	union {
		struct { void *head; struct list_ *next; } cons;
	} data;
}
List;

List *
empty(void) {
	List *l = malloc(sizeof(List));
	if (!l) exit(1);
	l->t = empty_t;
	return l;
}

List *
cons(void *a, List *next) {
	List *l = malloc(sizeof(List));
	if (!l) exit(1);
	l->t = cons_t;
	l->data.cons.head = a;
	l->data.cons.next = next;
	return l;
}

So we can see that if we imagine including a "typedef List* list;" statement to our C code, then we are effectively modeling (assuming the dereferencing is automatic) the list type in functional C.

Now let's try to implement some fundamental list operations. We'll start by restating our definition of list in functional C.

data list!auto {
	empty()
	cons(auto head, list!auto tail)
}

list op([])(auto a)
	cons(a, empty())

list op(++)(list a, list b) {
	match(a.empty) => b
	match(a.cons) => cons(a.head, a.tail ++ b)
}

auto head(list l)
	match(l.cons) => l.head

list tail(list l)
	match(l.cons) => l.tail

list init(list l) {
	match(cons : !cons.tail) => empty()
	match(l.cons) => [l.head] ~ init(l.tail)
}

auto last(list l) {
	match(l.cons : !cons.tail) => l.head
	match(l.cons) => last(l.tail)
}

A few things I've introduced here. For one, we've defined two operator overloaders; the syntax for this will be op(symbol)(params). Binary vs unary operators can be inferred from the parameters given. To be clear, the : symbol indicates "such that." The .cons and .empty values are equivalent to testing the type of the data and are used for pattern matching -- this may be somewhat primitive compared to what Haskell is doing, but it seems to work. Let's try a possible conversion of the above functions to C code.

typedef List* list;

list singleton(void *a) {
	return cons(a, empty());
}

list concat(list a, list b) {
	if (a->t == empty_t)
		return b;
	return cons(a->data.cons.head, concat(a->data.cons.tail, b));
}

void *head(list l) {
	if (l->t == cons_t)
		return l->data.cons.head;
	printf("Exception: calling head on an empty list\n");
	exit(1);
}

list tail(list l) {
	if (l->t == cons_t)
		return l->data.cons.tail;
	printf("Exception: calling tail on an empty list\n");
	exit(1);
}

list init(list l) {
	if (l->t == cons_t && l->data.cons.tail == NULL)
		return empty();
	if (l->t == cons_t)
		return concat(singleton(l->data.cons.head), init(l->data.cons.tail));
	printf("Exception: calling init on an empty list\n");
	exit(1);
}

void *last(list l) {
	if (l->t == cons_t && l->data.cons.tail == NULL)
		return l->data.cons.head;
	if (l->t == cons_t)
		return last(l->data.cons.tail);
	printf("Exception: calling last on an empty list\n");
	exit(1);
}

Note that our simplistic "exceptions" are thrown whenever we fail to satisfy any of the possible matches. Also note that the functional C code is 28 lines, while the ANSI C is 42 lines, and considerably less readable. The difference is quite a bit more pronounced when the definition and constructors of the List data type are also included.